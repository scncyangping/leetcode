/*
@date : 2020/03/18
@author : YaPi
@desc : 矩形重叠
*/
package main

import "math"

// 矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。
//
//如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。
//
//给出两个矩形，判断它们是否重叠并返回结果。
// 两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。
// 矩形中的所有坐标都处于 -10^9 和 10^9 之间。
// x 轴默认指向右，y 轴默认指向上。
// 你可以仅考虑矩形是正放的情况。

// 判断两个矩形是否重叠，可以先假设两个数组重叠，那么因为只考虑矩形
// 是正放的情况，所以，重叠的部分也必然是矩形，那么他们在x轴和y轴
// 也必然存在投影，且投影相交。所以判断他们是否重叠，可以判断他们在
// x轴和y轴的头像是否相交来判断

// 按照数学的思想来说，若两个线段相交，那么，两个线段最长的点的位置的
// 最小值，必然大于两个线段最小值的最大值。依据这个可得
// 在y轴的投影 分别为 rec1[1]~rec1[3] 和 rec2[1]~rec2[3]
// 在x轴的投影 分别为 rec1[0]~rec1[2] 和 rec2[0]~rec2[2]

func isRectangleOverlap2(rec1 []int, rec2 []int) bool {
	return math.Min(float64(rec1[2]), float64(rec2[2])) > math.Max(float64(rec1[0]), float64(rec2[0])) &&
		math.Min(float64(rec1[3]), float64(rec2[3])) > math.Max(float64(rec1[1]), float64(rec2[1]))
}

// 方法二
// 假设存在一条线，使得两个矩形不相交
// 具体地，我们用 (rec[0], rec[1]) 表示矩形的左下角，(rec[2], rec[3]) 表示矩形的右上角，
// 与题目描述一致。对于「左侧」，即矩形 rec1 在 x 轴上的最大值不能大于矩形 rec2 在 x 轴上最小值。
// 对于「右侧」、「上方」以及「下方」同理。因此我们可以翻译成如下的代码：
//
//左侧：rec1[2] <= rec2[0]；
//
//右侧：rec1[0] >= rec2[2]；
//
//上方：rec1[1] >= rec2[3]；
//
//下方：rec1[3] <= rec2[1]。

func isRectangleOverlap(rec1 []int, rec2 []int) bool {
	return !(rec1[2] <= rec2[0] || rec1[0] >= rec2[2] || rec1[3] <= rec2[1] || rec1[1] > rec2[3])
}
